// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  email                String                @unique
  cpf                  String                @unique
  phone                String                @unique
  password             String
  userType             UserType              @default(EMPREGADOR)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  passwordReset        PasswordReset[]
  createdAlerts        Alert[]               @relation("CreatedBy")
  uploadedDocuments    Document[]            @relation("UploadedBy")
  receivedEvaluations  Evaluation[]          @relation("Evaluated")
  givenEvaluations     Evaluation[]          @relation("Evaluator")
  sentPayments         Payment[]             @relation("Payer")
  receivedPayments     Payment[]             @relation("Receiver")
  requestedItems       ShoppingItem[]        @relation("RequestedBy")
  assignedTasks        Task[]                @relation("AssignedTo")
  createdTasks         Task[]                @relation("CreatedBy")
  timeRecords          TimeRecord[]
  auditLogs            AuditLog[]
  userGroups           UserGroup[]
  userPartners         UserPartner[]
  compras              Compra[]
  sentMessages         Message[]             @relation("UserSentMessages")
  empregadosDomesticos EmpregadorDomestico[] @relation("UserEmpregadosDomesticos")
  planosAssinatura     PlanoUsuario[]
  configuracoesPonto   ConfiguracaoPonto[]
  registrosPonto       RegistroPonto[]
  ocorrencias          Ocorrencia[]
  operacoesFinanceiras OperacaoFinanceira[]
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Alert {
  id                   String               @id @default(uuid())
  message              String
  type                 String
  createdBy            String
  user                 User                 @relation("CreatedBy", fields: [createdBy], references: [id])
  createdAt            DateTime             @default(now())
  empregadoDomesticoId String?
  empregadoDomestico   EmpregadorDomestico? @relation("EmpregadoAlertas", fields: [empregadoDomesticoId], references: [id])
}

model Document {
  id                   String               @id @default(uuid())
  nome                 String? // Temporariamente nullable
  tipo                 String? // Agora é uma string que referencia a tabela 8
  url                  String
  dataUpload           DateTime             @default(now())
  dataValidade         DateTime?
  uploadedBy           String
  user                 User                 @relation("UploadedBy", fields: [uploadedBy], references: [id])
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  messages             Message[]
  empregadoDomesticoId String?
  empregadoDomestico   EmpregadorDomestico? @relation("EmpregadoDocumentos", fields: [empregadoDomesticoId], references: [id])
  esocialEventId       String?
  esocialEvent         EsocialEvent?        @relation(fields: [esocialEventId], references: [id])
  isPublic             Boolean              @default(false)
  ocorrencias          Ocorrencia[]
}

model Evaluation {
  id          String   @id @default(uuid())
  score       Int
  comment     String?
  evaluatedId String
  evaluatorId String
  evaluated   User     @relation("Evaluated", fields: [evaluatedId], references: [id])
  evaluator   User     @relation("Evaluator", fields: [evaluatorId], references: [id])
  createdAt   DateTime @default(now())
}

model Payment {
  id         String   @id @default(uuid())
  amount     Float
  status     String
  payerId    String
  receiverId String
  payer      User     @relation("Payer", fields: [payerId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
}

model ShoppingItem {
  id          String   @id @default(uuid())
  name        String
  quantity    Int
  status      String
  requestedBy String
  user        User     @relation("RequestedBy", fields: [requestedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id             String       @id @default(uuid())
  title          String
  description    String?
  status         TaskStatus   @default(PENDING)
  prioridade     TaskPriority @default(MEDIA)
  foto           String?
  dataVencimento DateTime?
  dataConclusao  DateTime?
  observacoes    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  assignedTo String?
  assigned   User?   @relation("AssignedTo", fields: [assignedTo], references: [id])

  createdBy String
  creator   User   @relation("CreatedBy", fields: [createdBy], references: [id])

  messages Message[]
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  BAIXA
  MEDIA
  ALTA
}

model TimeRecord {
  id                    String        @id @default(uuid())
  userId                String
  user                  User          @relation(fields: [userId], references: [id])
  data                  DateTime // Data do registro (apenas data, para agrupamento)
  entrada               DateTime? // Início da jornada
  inicioIntervalo       DateTime? // Início do intervalo de descanso
  fimIntervalo          DateTime? // Fim do intervalo de descanso
  saida                 DateTime? // Fim do expediente
  geoEntrada            String? // Geolocalização na entrada
  geoSaida              String? // Geolocalização na saída
  geoInicioIntervalo    String? // Geolocalização no início do intervalo
  geoFimIntervalo       String? // Geolocalização no fim do intervalo
  wifiEntrada           String? // Rede/WiFi na entrada
  wifiSaida             String? // Rede/WiFi na saída
  wifiInicioIntervalo   String? // Rede/WiFi no início do intervalo
  wifiFimIntervalo      String? // Rede/WiFi no fim do intervalo
  deviceEntrada         String? // Device na entrada
  deviceSaida           String? // Device na saída
  deviceInicioIntervalo String? // Device no início do intervalo
  deviceFimIntervalo    String? // Device no fim do intervalo
  validado              Boolean       @default(false) // Validação do empregador
  observacao            String? // Observação opcional
  horasTrabalhadas      Float? // Total de horas trabalhadas no dia
  horasExtras           Float? // Total de horas extras no dia
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  alertas               PontoAlerta[]
}

model PontoAlerta {
  id           String     @id @default(uuid())
  timeRecordId String
  timeRecord   TimeRecord @relation(fields: [timeRecordId], references: [id])
  tipo         AlertaTipo
  mensagem     String
  ativo        Boolean    @default(true)
  createdAt    DateTime   @default(now())
}

enum AlertaTipo {
  PROXIMO_REGISTRO
  FORA_DO_ESPERADO
  FORA_GEO_WIFI
  HORA_EXTRA
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json
  ip        String?
  userAgent String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model Partner {
  id           String                @id @default(uuid())
  name         String
  cnpj         String?               @unique
  email        String?
  createdAt    DateTime              @default(now())
  groups       Group[]
  userPartners UserPartner[]
  empregadores EmpregadorDomestico[] @relation("PartnerEmpregadores")
}

model Group {
  id         String      @id @default(uuid())
  name       String
  address    String?
  partnerId  String?
  createdAt  DateTime    @default(now())
  partner    Partner?    @relation(fields: [partnerId], references: [id])
  userGroups UserGroup[]
  compras    Compra[]
  tasks      Task[]
  messages   Message[]
}

model UserGroup {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  role      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

model UserPartner {
  id        String   @id @default(uuid())
  userId    String
  partnerId String
  role      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  partner   Partner  @relation(fields: [partnerId], references: [id])
}

model Compra {
  id                   String               @id @default(uuid())
  produto              String
  foto                 String?
  unidade              String
  quantidade           Int
  valor                Float
  dataCompra           DateTime
  status               String
  grupoId              String
  usuarioId            String
  grupo                Group                @relation(fields: [grupoId], references: [id])
  usuario              User                 @relation(fields: [usuarioId], references: [id])
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  empregadoDomesticoId String?
  empregadoDomestico   EmpregadorDomestico? @relation("EmpregadoCompras", fields: [empregadoDomesticoId], references: [id])
}

model Message {
  id         String    @id @default(uuid())
  text       String?
  createdAt  DateTime  @default(now())
  senderId   String
  sender     User      @relation("UserSentMessages", fields: [senderId], references: [id])
  groupId    String
  group      Group     @relation(fields: [groupId], references: [id])
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])
  taskId     String?
  task       Task?     @relation(fields: [taskId], references: [id])
}

model EsocialEventType {
  id        String         @id @default(uuid())
  codigo    String         @unique // Ex: S-2200
  descricao String
  createdAt DateTime       @default(now())
  eventos   EsocialEvent[]
}

model EsocialEvent {
  id              String           @id @default(uuid())
  codigo          String // Ex: S-2200
  descricao       String
  tipoId          String
  tipo            EsocialEventType @relation(fields: [tipoId], references: [id])
  xmlPayload      String?
  status          String // PENDING, SENT, PROCESSED, REJECTED
  dataEnvio       DateTime?
  dataRetorno     DateTime?
  mensagemRetorno String?
  empregadorId    String
  usuarioId       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  documents       Document[]
  registrosPonto  RegistroPonto[]
  ocorrencias     Ocorrencia[]
}

model EmpregadorDomestico {
  id                   String                @id @default(uuid())
  cpf                  String                @unique
  nomeCompleto         String
  dataNascimento       DateTime
  sexo                 String
  nacionalidade        String
  grauInstrucao        String
  nomeMae              String
  endereco             String
  numero               String
  complemento          String?
  bairro               String
  cep                  String
  municipio            String
  uf                   String
  telefone             String
  telefoneAlternativo  String?
  email                String
  emailAlternativo     String?
  nomeSocial           String?
  estadoCivil          String?
  racaCor              String?
  dependentes          Json?
  deficiencia          String?
  dataAdmissao         DateTime
  matricula            String
  categoria            String
  remuneracao          Float
  cargoId              String
  cargo                CboCargo              @relation("CargoEmpregados", fields: [cargoId], references: [codigo])
  jornadaTrabalho      String
  ctpsNumero           String
  ctpsSerie            String
  ctpsUf               String
  pisPasep             String
  empregadorId         String?
  empregador           EmpregadorDomestico?  @relation("EmpregadorEmpregados", fields: [empregadorId], references: [id])
  empregados           EmpregadorDomestico[] @relation("EmpregadorEmpregados")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String?
  user                 User?                 @relation("UserEmpregadosDomesticos", fields: [userId], references: [id])
  alertas              Alert[]               @relation("EmpregadoAlertas")
  compras              Compra[]              @relation("EmpregadoCompras")
  documentos           Document[]            @relation("EmpregadoDocumentos")
  partnerId            String?
  partner              Partner?              @relation("PartnerEmpregadores", fields: [partnerId], references: [id])
  registrosPonto       RegistroPonto[]
  ocorrencias          Ocorrencia[]
  operacoesFinanceiras OperacaoFinanceira[]
}

model CboCargo {
  codigo     String                @id
  descricao  String
  observacao String?
  empregados EmpregadorDomestico[] @relation("CargoEmpregados")
}

// Modelos de planos de assinatura e pagamentos

enum PerfilPlano {
  EMPREGADOR
  PARCEIRO
}

enum StatusPlanoUsuario {
  ATIVO
  CANCELADO
  EXPIRADO
  PENDENTE_PAGAMENTO
}

enum FormaPagamento {
  DINHEIRO
  PIX
  TRANSFERENCIA
  OUTRO
}

enum CondicaoPagamento {
  AVISTA
  PARCELADO
}

enum StatusPagamento {
  PENDENTE
  PAGO
  CANCELADO
  FALHA
}

model Plano {
  id                String         @id @default(uuid())
  nome              String
  descricao         String
  valor             Float
  quantidadeEventos Int
  nivelSuporte      String
  ativo             Boolean        @default(true)
  criadoEm          DateTime       @default(now())
  atualizadoEm      DateTime       @updatedAt
  planosUsuarios    PlanoUsuario[]
}

model PlanoUsuario {
  id           String      @id @default(uuid())
  usuarioId    String
  planoId      String
  dataInicio   DateTime
  dataFim      DateTime?
  status       String // PENDENTE_PAGAMENTO, ATIVO, CANCELADO, SUSPENSO
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt
  usuario      User        @relation(fields: [usuarioId], references: [id])
  plano        Plano       @relation(fields: [planoId], references: [id])
  pagamentos   Pagamento[]

  @@index([usuarioId])
  @@index([planoId])
}

model Pagamento {
  id             String       @id @default(uuid())
  valor          Float
  status         String // PENDENTE, APROVADO, RECUSADO, ESTORNADO
  dataPagamento  DateTime?
  dataVencimento DateTime
  planoUsuarioId String
  planoUsuario   PlanoUsuario @relation(fields: [planoUsuarioId], references: [id])
  criadoEm       DateTime     @default(now())
  atualizadoEm   DateTime     @updatedAt

  @@index([planoUsuarioId])
}

model ConfiguracaoPonto {
  id         String          @id @default(uuid())
  usuarioId  String
  horaInicio DateTime
  horaFim    DateTime
  latitude   Float?
  longitude  Float?
  raioMetros Int?
  ativo      Boolean         @default(true)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  usuario    User            @relation(fields: [usuarioId], references: [id])
  registros  RegistroPonto[]

  @@index([usuarioId])
}

model RegistroPonto {
  id                   String              @id @default(uuid())
  dataHora             DateTime
  tipo                 String // ENTRADA, SAIDA, INICIO_INTERVALO, FIM_INTERVALO
  usuarioId            String
  usuario              User                @relation(fields: [usuarioId], references: [id])
  empregadoDomesticoId String
  empregadoDomestico   EmpregadorDomestico @relation(fields: [empregadoDomesticoId], references: [id])
  latitude             Float?
  longitude            Float?
  wifiSSID             String?
  wifiBSSID            String?
  wifiSignal           Int? // Intensidade do sinal em dBm
  timezone             String
  dispositivo          String
  ip                   String
  validado             Boolean             @default(false)
  validadoPor          String?
  validadoEm           DateTime?
  observacao           String?
  esocialEventId       String?
  esocialEvent         EsocialEvent?       @relation(fields: [esocialEventId], references: [id])
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  configuracaoPontoId  String?
  configuracaoPonto    ConfiguracaoPonto?  @relation(fields: [configuracaoPontoId], references: [id])
}

model ValidacaoEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  codigo    String
  expiraEm  DateTime
  validado  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model ValidacaoTelefone {
  id        String   @id @default(cuid())
  telefone  String   @unique
  codigo    String
  expiraEm  DateTime
  validado  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([telefone])
}

model Empregador {
  id                 String   @id @default(cuid())
  cpf                String   @unique
  nomeCompleto       String
  dataNascimento     DateTime
  sexo               String
  tipoEmpregador     String
  caepf              String?
  telefone           String?
  email              String?
  aceitaComunicacoes Boolean  @default(false)
  aceitaTermos       Boolean  @default(false)
  emailValidado      Boolean  @default(false)
  telefoneValidado   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([cpf])
  @@index([email])
  @@index([telefone])
}

model Ocorrencia {
  id                   String              @id @default(uuid())
  tipo                 String // Agora é uma string que referencia a tabela 9
  dataInicio           DateTime
  dataFim              DateTime
  justificativa        String?
  documentos           Document[]
  usuarioId            String
  usuario              User                @relation(fields: [usuarioId], references: [id])
  empregadoDomesticoId String
  empregadoDomestico   EmpregadorDomestico @relation(fields: [empregadoDomesticoId], references: [id])
  esocialEventId       String?
  esocialEvent         EsocialEvent?       @relation(fields: [esocialEventId], references: [id])
  validado             Boolean             @default(false)
  validadoPor          String?
  validadoEm           DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

enum TipoOperacaoFinanceira {
  ADIANTAMENTO
  EMPRESTIMO
}

enum StatusOperacaoFinanceira {
  PENDENTE
  APROVADO
  REJEITADO
  CONCLUIDO
}

enum StatusParcela {
  PENDENTE
  PAGO
}

model OperacaoFinanceira {
  id                   String                      @id @default(uuid())
  tipo                 TipoOperacaoFinanceira
  valor                Float
  dataOperacao         DateTime
  dataVencimento       DateTime
  formaPagamento       FormaPagamento
  status               StatusOperacaoFinanceira    @default(PENDENTE)
  observacao           String?
  comprovanteUrl       String?
  dataPagamento        DateTime?
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  usuario              User                        @relation(fields: [usuarioId], references: [id])
  usuarioId            String
  empregadoDomestico   EmpregadorDomestico         @relation(fields: [empregadoDomesticoId], references: [id])
  empregadoDomesticoId String
  parcelas             ParcelaOperacaoFinanceira[]

  @@index([usuarioId])
  @@index([empregadoDomesticoId])
}

model ParcelaOperacaoFinanceira {
  id                   String             @id @default(uuid())
  numero               Int
  valor                Float
  dataVencimento       DateTime
  dataPagamento        DateTime?
  status               StatusParcela      @default(PENDENTE)
  observacao           String?
  comprovanteUrl       String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  operacaoFinanceira   OperacaoFinanceira @relation(fields: [operacaoFinanceiraId], references: [id])
  operacaoFinanceiraId String

  @@index([operacaoFinanceiraId])
}

// Tabelas do eSocial
model EsocialTabela {
  id         String              @id @default(uuid())
  codigo     String              @unique // Código da tabela (ex: 1, 2, 3...)
  nome       String // Nome da tabela
  descricao  String? // Descrição detalhada
  versao     String // Versão atual da tabela
  dataInicio DateTime // Data de início da vigência
  dataFim    DateTime? // Data de fim da vigência (se aplicável)
  itens      EsocialTabelaItem[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("esocial_tabelas")
}

model EsocialTabelaItem {
  id         String        @id @default(uuid())
  tabelaId   String
  codigo     String // Código do item na tabela
  descricao  String // Descrição do item
  valor      String? // Valor do item (se aplicável)
  ativo      Boolean       @default(true)
  dataInicio DateTime // Data de início da vigência
  dataFim    DateTime? // Data de fim da vigência (se aplicável)
  tabela     EsocialTabela @relation(fields: [tabelaId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@unique([tabelaId, codigo])
  @@map("esocial_tabela_itens")
}

// Eventos do eSocial
model EsocialEvento {
  id         String               @id @default(uuid())
  codigo     String               @unique // Código do evento (ex: S-2200)
  nome       String // Nome do evento
  descricao  String? // Descrição detalhada
  versao     String // Versão atual do evento
  dataInicio DateTime // Data de início da vigência
  dataFim    DateTime? // Data de fim da vigência (se aplicável)
  campos     EsocialEventoCampo[]
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  @@map("esocial_eventos")
}

model EsocialEventoCampo {
  id          String        @id @default(uuid())
  eventoId    String
  codigo      String // Código do campo
  nome        String // Nome do campo
  tipo        String // Tipo do campo (texto, número, data, etc)
  obrigatorio Boolean       @default(false)
  tamanho     Int? // Tamanho do campo (se aplicável)
  decimais    Int? // Número de casas decimais (se aplicável)
  tabelaId    String? // Referência à tabela do eSocial (se aplicável)
  evento      EsocialEvento @relation(fields: [eventoId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([eventoId, codigo])
  @@map("esocial_evento_campos")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  document  String   @unique
  type      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Event {
  id          String      @id @default(cuid())
  type        EventType
  status      EventStatus @default(PENDING)
  data        Json
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  processedAt DateTime?
  error       String?
  logs        EventLog[]

  @@index([companyId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model EventLog {
  id        String   @id @default(cuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  level     String
  message   String
  details   Json?
  createdAt DateTime @default(now())

  @@index([eventId])
  @@index([createdAt])
}

enum EventType {
  S_1202
}

enum EventStatus {
  PENDING
  PROCESSING
  PROCESSED
  ERROR
  CANCELLED
}

enum UserType {
  ADMIN
  EMPREGADOR
  EMPREGADO
  PARCEIRO
  FAMILIAR
}

model ConfiguracaoGlobal {
  id        String   @id @default(uuid())
  chave     String   @unique
  valor     String
  descricao String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
