/**
 * Arquivo: diagnostico.js
 * Caminho: diagnostico.js
 * Criado em: 2025-06-01
 * √öltima atualiza√ß√£o: 2025-05-31
 * Descri√ß√£o: Arquivo de diagn√≥stico do Next.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç DIAGN√ìSTICO NEXT.JS - Iniciando...\n');

// 1. Verificar vers√µes
function checkVersions() {
  console.log('üìã VERS√ïES:');
  try {
    const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    console.log(`  Node.js: ${nodeVersion}`);
    console.log(`  NPM: ${npmVersion}`);
    
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    console.log(`  Next.js: ${packageJson.dependencies?.next || 'n√£o encontrado'}`);
    console.log(`  React: ${packageJson.dependencies?.react || 'n√£o encontrado'}`);
  } catch (e) {
    console.log('  ‚ùå Erro ao verificar vers√µes:', e.message);
  }
  console.log('');
}

// 2. Verificar depend√™ncias conflitantes
function checkConflicts() {
  console.log('‚ö†Ô∏è  DEPEND√äNCIAS PROBLEM√ÅTICAS:');
  try {
    const result = execSync('npm ls --depth=0', { encoding: 'utf8' });
    
    const problematicos = ['rimraf@3', 'glob@7', 'eslint@6', 'eslint@7', '@mui/base'];
    let encontrados = [];
    
    problematicos.forEach(pkg => {
      if (result.includes(pkg.split('@')[0])) {
        encontrados.push(pkg.split('@')[0]);
      }
    });
    
    if (encontrados.length > 0) {
      console.log(`  ‚ùå Encontrados: ${encontrados.join(', ')}`);
    } else {
      console.log('  ‚úÖ Nenhum pacote problem√°tico detectado');
    }
  } catch (e) {
    console.log('  ‚ö†Ô∏è  Aviso: algumas depend√™ncias podem ter conflitos');
  }
  console.log('');
}

// 3. Verificar configura√ß√µes
function checkConfigs() {
  console.log('‚öôÔ∏è  CONFIGURA√á√ïES:');
  
  // next.config.js
  if (fs.existsSync('next.config.js')) {
    const config = fs.readFileSync('next.config.js', 'utf8');
    if (config.includes('webpackDevMiddleware')) {
      console.log('  ‚ùå next.config.js cont√©m webpackDevMiddleware (REMOVIDO no Next 14)');
    } else if (config.includes('webpack')) {
      console.log('  ‚ö†Ô∏è  next.config.js cont√©m configura√ß√£o webpack');
    } else {
      console.log('  ‚úÖ next.config.js limpo');
    }
  }
  
  // tsconfig.json
  if (fs.existsSync('tsconfig.json')) {
    const tsconfig = JSON.parse(fs.readFileSync('tsconfig.json', 'utf8'));
    if (tsconfig.compilerOptions?.paths) {
      console.log('  ‚úÖ tsconfig.json com paths configurados');
    }
  }
  console.log('');
}

// 4. Testar build m√≠nimo
function testMinimalBuild() {
  console.log('üß™ TESTE M√çNIMO:');
  
  // Backup next.config.js
  let backupConfig = null;
  if (fs.existsSync('next.config.js')) {
    backupConfig = fs.readFileSync('next.config.js', 'utf8');
    console.log('  üì¶ Fazendo backup do next.config.js...');
  }
  
  // Criar config m√≠nimo
  const minimalConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true
};

module.exports = nextConfig;`;
  
  fs.writeFileSync('next.config.js', minimalConfig);
  
  try {
    console.log('  üöÄ Testando next build...');
    execSync('npx next build', { 
      encoding: 'utf8', 
      timeout: 30000,
      stdio: 'pipe'
    });
    console.log('  ‚úÖ Build funcionou com configura√ß√£o m√≠nima!');
  } catch (e) {
    console.log('  ‚ùå Build falhou mesmo com config m√≠nima');
    console.log('  üìÑ Erro:', e.message.split('\n')[0]);
  }
  
  // Restaurar config original
  if (backupConfig) {
    fs.writeFileSync('next.config.js', backupConfig);
    console.log('  üîÑ next.config.js restaurado');
  }
  console.log('');
}

// 5. Gerar solu√ß√£o autom√°tica
function generateSolution() {
  console.log('üí° SOLU√á√ÉO RECOMENDADA:');
  
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const nextVersion = packageJson.dependencies?.next;
  
  if (nextVersion?.includes('14.')) {
    console.log('  üéØ Para Next.js 14:');
    console.log('     1. npm install rimraf@latest glob@latest eslint@latest');
    console.log('     2. Remover webpackDevMiddleware do next.config.js');
    console.log('     3. Usar apenas webpack() se necess√°rio');
  } else {
    console.log('  üéØ Atualizar para Next.js 14:');
    console.log('     1. npm install next@latest react@latest react-dom@latest');
    console.log('     2. Limpar node_modules e reinstalar');
  }
  
  console.log('\n  üìã Script de corre√ß√£o autom√°tica:');
  console.log('     npm run fix-dependencies');
}

// Executar diagn√≥stico
async function runDiagnostic() {
  checkVersions();
  checkConflicts();
  checkConfigs();
  testMinimalBuild();
  generateSolution();
}

runDiagnostic(); 